CREATE TABLE USUARIO (
    ID_USUARIO NUMBER(9) GENERATED BY DEFAULT ON NULL AS IDENTITY CONSTRAINT PK_USUARIO_IDUSUARIO PRIMARY KEY,
    NOMBRE VARCHAR2(15) CONSTRAINT UQ_USUARIO_NOMBRE UNIQUE,
    CONSTASENIA VARCHAR2(15)
);

CREATE TABLE QUIZ (
    ID_QUIZ NUMBER(9) GENERATED BY DEFAULT ON NULL AS IDENTITY CONSTRAINT PK_QUIZ_IDQUIZ PRIMARY KEY,
    PUNTOS NUMBER(3),
    PREGUNTAS VARCHAR2(50),
    RESPUESTAS VARCHAR2(50),
    COMPLETADO VARCHAR2(2) CONSTRAINT CH_QUIZ_COMPLETADO CHECK (COMPLETADO IN ('SI', 'NO'))
);

CREATE TABLE TEORIA (
    ID_TEORIA NUMBER(9) GENERATED BY DEFAULT ON NULL AS IDENTITY CONSTRAINT PK_TEORIA_IDTEORIA PRIMARY KEY,
    CONTENIDO VARCHAR2(500),
    ENLACES VARCHAR2(500)
);

CREATE TABLE RANKING (
    ID_RANKING NUMBER(9) GENERATED BY DEFAULT ON NULL AS IDENTITY CONSTRAINT PK_RANKING_IDRANKING PRIMARY KEY,
    ID_QUIZ NUMBER(9),
    ID_USUARIO NUMBER(9),
    PUESTO NUMBER(10),
    CONSTRAINT FK_RANKING_IDQUIZ FOREIGN KEY (ID_QUIZ) REFERENCES QUIZ (ID_QUIZ),
    CONSTRAINT FK_RANKING_IDUSUARIO FOREIGN KEY (ID_USUARIO) REFERENCES USUARIO (ID_USUARIO)
);

CREATE TABLE PROGRESO (
    ID_PROGRESO NUMBER(9) GENERATED BY DEFAULT ON NULL AS IDENTITY CONSTRAINT PK_PROGRESO_IDPROGRESO PRIMARY KEY,
    ID_USUARIO NUMBER(9),
    ID_QUIZ NUMBER(9),
    ID_TEORIA NUMBER(9),
    COMPLETADO VARCHAR2(2) CONSTRAINT CH_PROGRESO_COMPLETADO CHECK (COMPLETADO IN ('SI', 'NO')),
    CONSTRAINT FK_PROGRESO_IDUSUARIO FOREIGN KEY (ID_USUARIO) REFERENCES USUARIO (ID_USUARIO),
    CONSTRAINT FK_PROGRESO_IDQUIZ FOREIGN KEY (ID_QUIZ) REFERENCES QUIZ (ID_QUIZ),
    CONSTRAINT FK_PROGRESO_IDTEORIA FOREIGN KEY (ID_TEORIA) REFERENCES TEORIA (ID_TEORIA)
);

CREATE TABLE RESPUESTAS_USUARIO (
    ID_RESPUESTA NUMBER(9) GENERATED BY DEFAULT ON NULL AS IDENTITY CONSTRAINT PK_RESPUESTA_IDRESPUESTA PRIMARY KEY,
    ID_USUARIO NUMBER(9),
    ID_QUIZ NUMBER(9),
    RESPUESTA_ELEGIDA VARCHAR2(50),
    ES_CORRECTA VARCHAR2(2) CONSTRAINT CH_RESPUESTA_CORRECTA CHECK (ES_CORRECTA IN ('SI', 'NO')),
    CONSTRAINT FK_RESPUESTA_IDUSUARIO FOREIGN KEY (ID_USUARIO) REFERENCES USUARIO (ID_USUARIO),
    CONSTRAINT FK_RESPUESTA_IDQUIZ FOREIGN KEY (ID_QUIZ) REFERENCES QUIZ (ID_QUIZ)
);

CREATE TABLE PROGRESO_TEORIA (
    ID_PROGRESO_TEORIA NUMBER(9) GENERATED BY DEFAULT ON NULL AS IDENTITY CONSTRAINT PK_PROGRESO_TEORIA_IDPROGRESO PRIMARY KEY,
    ID_USUARIO NUMBER(9),
    ID_TEORIA NUMBER(9),
    COMPLETADO VARCHAR2(2) CONSTRAINT CH_PROGRESO_TEORIA_COMPLETADO CHECK (COMPLETADO IN ('SI', 'NO')),
    CONSTRAINT FK_PROGRESO_TEORIA_IDUSUARIO FOREIGN KEY (ID_USUARIO) REFERENCES USUARIO (ID_USUARIO),
    CONSTRAINT FK_PROGRESO_TEORIA_IDTEORIA FOREIGN KEY (ID_TEORIA) REFERENCES TEORIA (ID_TEORIA)
);

--INCLUSIÓN DE DATOS

-- Inserción de usuarios
INSERT INTO USUARIO (NOMBRE, CONSTASENIA)
VALUES ('usuario1', 'contraseña1');

INSERT INTO USUARIO (NOMBRE, CONSTASENIA)
VALUES ('usuario2', 'contraseña2');

-- Inserción de teorías
INSERT INTO TEORIA (CONTENIDO, ENLACES)
VALUES ('Contenido de teoría 1', 'http://enlace1.com, http://enlace2.com');

INSERT INTO TEORIA (CONTENIDO, ENLACES)
VALUES ('Contenido de teoría 2', 'http://enlace3.com, http://enlace4.com');

-- Inserción de quizzes
INSERT INTO QUIZ (PUNTOS, PREGUNTAS, RESPUESTAS, COMPLETADO)
VALUES (10, 'Pregunta 1', 'Respuesta 1', 'NO');

INSERT INTO QUIZ (PUNTOS, PREGUNTAS, RESPUESTAS, COMPLETADO)
VALUES (15, 'Pregunta 2', 'Respuesta 2', 'SI');

-- Inserción de ranking
INSERT INTO RANKING (ID_QUIZ, ID_USUARIO, PUESTO)
VALUES (1, 1, 1);

INSERT INTO RANKING (ID_QUIZ, ID_USUARIO, PUESTO)
VALUES (1, 2, 2);

-- Inserción de progreso de usuarios en teorías
INSERT INTO PROGRESO_TEORIA (ID_USUARIO, ID_TEORIA, COMPLETADO)
VALUES (1, 1, 'SI');

INSERT INTO PROGRESO_TEORIA (ID_USUARIO, ID_TEORIA, COMPLETADO)
VALUES (2, 1, 'NO');

-- Inserción de respuestas de usuarios
INSERT INTO RESPUESTAS_USUARIO (ID_USUARIO, ID_QUIZ, RESPUESTA_ELEGIDA, ES_CORRECTA)
VALUES (1, 1, 'Respuesta 1', 'SI');

INSERT INTO RESPUESTAS_USUARIO (ID_USUARIO, ID_QUIZ, RESPUESTA_ELEGIDA, ES_CORRECTA)
VALUES (2, 1, 'Respuesta 1', 'NO');

INSERT INTO RESPUESTAS_USUARIO (ID_USUARIO, ID_QUIZ, RESPUESTA_ELEGIDA, ES_CORRECTA)
VALUES (1, 2, 'Respuesta 2', 'SI');

INSERT INTO RESPUESTAS_USUARIO (ID_USUARIO, ID_QUIZ, RESPUESTA_ELEGIDA, ES_CORRECTA)
VALUES (2, 2, 'Respuesta 1', 'NO');

-- Inserción de progreso en quizzes
INSERT INTO PROGRESO (ID_USUARIO, ID_QUIZ, ID_TEORIA, COMPLETADO)
VALUES (1, 1, 1, 'SI');

INSERT INTO PROGRESO (ID_USUARIO, ID_QUIZ, ID_TEORIA, COMPLETADO)
VALUES (2, 1, 1, 'SI');

INSERT INTO PROGRESO (ID_USUARIO, ID_QUIZ, ID_TEORIA, COMPLETADO)
VALUES (1, 2, 2, 'NO');

INSERT INTO PROGRESO (ID_USUARIO, ID_QUIZ, ID_TEORIA, COMPLETADO)
VALUES (2, 2, 2, 'SI');


-- ALGUNAS CONSULTAS BÁSICAS

-- Consulta TOP 10 Ranking

SELECT U.NOMBRE AS NOMBRE_USUARIO, SUM(Q.PUNTOS) AS PUNTUACION_TOTAL
FROM USUARIO U
JOIN RANKING R ON U.ID_USUARIO = R.ID_USUARIO
JOIN QUIZ Q ON R.ID_QUIZ = Q.ID_QUIZ
GROUP BY U.NOMBRE
ORDER BY SUM(Q.PUNTOS) DESC
FETCH FIRST 10 ROWS ONLY;


-- Consultar puntos de usuario en un quiz
SELECT U.NOMBRE AS NOMBRE_USUARIO, Q.PUNTOS AS PUNTOS_DEL_QUIZ
FROM USUARIO U
JOIN RANKING R ON U.ID_USUARIO = R.ID_USUARIO
JOIN QUIZ Q ON R.ID_QUIZ = Q.ID_QUIZ
WHERE U.ID_USUARIO = :id_usuario -- Reemplazar con el ID del usuario que deseas consultar
AND Q.ID_QUIZ = :id_quiz; -- Reemplazar con el ID del quiz que deseas consultar

-- Quiz completado

SELECT CASE 
WHEN Q.COMPLETADO = 'SI' THEN 'Completado'
ELSE 'No Completado'
END AS ESTADO_COMPLETADO
FROM RANKING R
JOIN QUIZ Q ON R.ID_QUIZ = Q.ID_QUIZ
WHERE R.ID_USUARIO = :id_usuario -- Reemplazar con el ID del usuario que deseas consultar
  AND Q.ID_QUIZ = :id_quiz; -- Reemplazar con el ID del quiz que deseas consultar
